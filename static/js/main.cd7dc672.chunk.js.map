{"version":3,"sources":["getDeviceId.js","errors.js","App1.js","serviceWorker.js","index.js"],"names":["NoVideoInputDevicesError","require","defaultDeviceIdChooser","filteredDevices","videoDevices","facingMode","length","deviceId","getFacingModePattern","module","exports","getDeviceId","chooseDeviceId","Promise","resolve","reject","enumerateDevices","navigator","mediaDevices","err","then","devices","filter","device","kind","pattern","label","test","this","name","message","prototype","Error","App1","useState","result","state","setState","delay","onError","console","error","onScan","data","style","width","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"yHAAQA,EAA6BC,EAAQ,IAArCD,yBAER,SAASE,EAAuBC,EAAiBC,EAAcC,GAC7D,OAAGF,EAAgBG,OAAS,EACnBH,EAAgB,GAAGI,SAEF,GAAvBH,EAAaE,QAA6B,QAAdD,EACtBD,EAAa,GAAGG,SAElBH,EAAa,GAAGG,SAGzB,IAAMC,EAAuB,SAACH,GAAD,MAA8B,eAAdA,EACzC,0BACA,qBAiCJI,EAAOC,QAAU,CAAEC,YA/BnB,SAAqBN,GAAsD,IAA1CO,EAAyC,uDAAxBV,EAEhD,OAAO,IAAIW,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EACJ,IACEA,EAAmBC,UAAUC,aAAaF,mBAC3C,MAAMG,GACLJ,EAAO,IAAIf,GAEbgB,EAAiBI,MAAK,SAAAC,GAEpB,IAAMjB,EAAeiB,EAAQC,QAC3B,SAAAC,GAAM,MAAmB,cAAfA,EAAOC,QAGnB,GAAIpB,EAAaE,OAAS,EACxBS,EAAO,IAAIf,OADb,CAKA,IAAMyB,EAAUjB,EAAqBH,GAG/BF,EAAkBC,EAAakB,QAAO,gBAAGI,EAAH,EAAGA,MAAH,OAC1CD,EAAQE,KAAKD,MAEfZ,EAAQF,EAAeT,EAAiBC,EAAcC,YAK5BG,yB,iBC/ChC,SAASR,IACL4B,KAAKC,KAAO,2BACZD,KAAKE,QAAU,+BAEjB9B,EAAyB+B,UAAY,IAAIC,MAEzCvB,EAAOC,QAAU,CACfV,6B,gHCDW,SAASiC,IAAQ,IAAD,EAECC,mBAAS,CACjCC,OAAQ,cAHe,mBAEnBC,EAFmB,KAEZC,EAFY,KAiB3B,OACI,6BACI,kBAAC,IAAD,CACIC,MAAO,IACPC,QARQ,SAAApB,GAChBqB,QAAQC,MAAMtB,IAQNuB,OAhBO,SAAAC,GACXA,GACAN,EAAS,CACLF,OAAQQ,KAcRC,MAAO,CAAEC,MAAO,SAEpB,2BAAIL,QAAQM,IAAIV,EAAMD,UCnBdY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACrB,EAAD,OAEFsB,SAASC,eAAe,SDyHpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLD,QAAQC,MAAMA,EAAMX,a","file":"static/js/main.cd7dc672.chunk.js","sourcesContent":["const { NoVideoInputDevicesError } = require('./errors')\n\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {\n  if(filteredDevices.length > 0){\n    return filteredDevices[0].deviceId\n  }\n  if(videoDevices.length == 1 || facingMode == 'user'){\n    return videoDevices[0].deviceId\n  }\n  return videoDevices[1].deviceId\n}\n\nconst getFacingModePattern = (facingMode) => facingMode == 'environment'\n  ? /rear|back|environment/ig\n  : /front|user|face/ig\n\nfunction getDeviceId(facingMode, chooseDeviceId = defaultDeviceIdChooser) {\n  // Get manual deviceId from available devices.\n  return new Promise((resolve, reject) => {\n    let enumerateDevices\n    try{\n      enumerateDevices = navigator.mediaDevices.enumerateDevices()\n    }catch(err){\n      reject(new NoVideoInputDevicesError())\n    }\n    enumerateDevices.then(devices => {\n      // Filter out non-videoinputs\n      const videoDevices = devices.filter(\n        device => device.kind == 'videoinput'\n      )\n\n      if (videoDevices.length < 1) {\n        reject(new NoVideoInputDevicesError())\n        return\n      }\n\n      const pattern = getFacingModePattern(facingMode)\n\n      // Filter out video devices without the pattern\n      const filteredDevices = videoDevices.filter(({ label }) =>\n        pattern.test(label))\n\n      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode))\n    })\n  })\n}\n\nmodule.exports = { getDeviceId, getFacingModePattern }","function NoVideoInputDevicesError() {\n    this.name = 'NoVideoInputDevicesError'\n    this.message = 'No video input devices found'\n  }\n  NoVideoInputDevicesError.prototype = new Error()\n  \n  module.exports = {\n    NoVideoInputDevicesError,\n  }","import React, { useState } from 'react'\nimport QrReader from 'react-qr-reader'\nimport { getDeviceId, getFacingModePattern } from './getDeviceId'\n// const { getDeviceId, getFacingModePattern } = require('./getDeviceId')\n\n\nexport default function App1() {\n\n    const [ state, setState ] = useState({\n        result: 'No result',\n    })\n\n    const handleScan = data => {\n        if (data) {\n            setState({\n                result: data\n            })\n        }\n    }\n    const handleError = err => {\n        console.error(err)\n    }\n\n    return (\n        <div>\n            <QrReader\n                delay={300}\n                onError={handleError}\n                onScan={handleScan}\n                style={{ width: '30%' }}\n            />\n            <p>{console.log(state.result)}</p>\n        </div>\n    )\n\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App1 from './App1';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App1 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}